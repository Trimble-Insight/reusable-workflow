on:
  workflow_call:

    inputs:
      environment:
        required: true
        type: string
      ecr-repository:
        required: true
        type: string
      lambda-function-name:
        required: true
        type: string

    secrets:
      aws-account-id:
        required: true
      region:
        required: true
      access-key-id:
        required: true
      secret-access-key:
        required: true
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        # Semantic version range syntax or exact version of a Python version
        python-version: '3.x'
        # Optional - x64 or x86 architecture, defaults to x64
        architecture: 'x64'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.access-key-id }}
        aws-secret-access-key: ${{ secrets.secret-access-key }}
        aws-region: ${{ secrets.region }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Build, tag, and push image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ secrets.aws-account-id }}.dkr.ecr.${{ secrets.region }}.amazonaws.com
        ECR_REPOSITORY: ${{ inputs.ecr-repository }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg options=opt/options.${{ inputs.environment }}.json --build-arg schema=opt/lat.schema.sql
        docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Update AWS Lambda Function Code
      env:
        IMAGE_URI: ${{ steps.build-image.outputs.image }}
      run: |
        aws lambda update-function-code --function-name arn:aws:lambda:${{ secrets.region }}:${{ secrets.aws-account-id }}:function:${{ inputs.lambda-function-name }} --image-uri $IMAGE_URI
