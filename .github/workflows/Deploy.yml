on:
  workflow_call:

    inputs:
      service-name:
        required: true
        type: string
      environment:
        required: true
        type: string
      cluster-name:
        required: true
        type: string
      repository:
        required: true
        type: string
      ecr-repository:
        required: true
        type: string
      rule-prefix:
        required: false
        type: string
      environment-file:
        required: false
        type: string
      is-scheduled-task:
        required: false
        type: boolean

    secrets:
      aws-account-id:
        required: true
      region:
        required: true
      access-key-id:
        required: true
      secret-access-key:
        required: true
      personal-access-token:
        required: true
      github-token:
         required: true
      git-admin-user:
        required: false
      version-major:
        required: true
      version-minor:
        required: true
      version-hotfix:
        required: true
      version-build:
        required: true
      last-preview-build:
        required: false
      firebase-api-key:
        required: false
      google-api-key:
        required: false
      google-ios-api-key:
        required: false
      google-map-api-key:
        required: false

jobs:
  update_version:
    uses: ./.github/workflows/UpdateBuildVersion.yml
    with:
      service-name: ${{ inputs.service-name }}
      environment: ${{ inputs.environment }}
      repository: ${{ inputs.repository }}
      environment-file: ${{ inputs.environment-file }}
    secrets:
      personal-access-token: ${{ secrets.personal-access-token }}
      github-token: ${{ secrets.github-token }}
      version-major: ${{ secrets.version-major }}
      version-minor: ${{ secrets.version-minor }}
      version-hotfix: ${{ secrets.version-hotfix }}
      version-build: ${{ secrets.version-build }}
      last-preview-build: ${{ secrets.last-preview-build }}

  deploy:
    runs-on: ubuntu-latest
    needs: update_version
    environment: ${{ inputs.environment }}
    env:
      FORMATTED_ENVIRONMENT: null
      ECR_REGISTRY: ${{ secrets.aws-account-id }}.dkr.ecr.${{ secrets.region }}.amazonaws.com
      ECR_REPOSITORY: ${{ inputs.ecr-repository }}
      IMAGE_TAG: ${{ github.sha }}
      VERSION: null

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for Preview
        if: ${{ inputs.environment == 'preview' }}
        run: echo "FORMATTED_ENVIRONMENT=Preview" >> $GITHUB_ENV

      - name: Check for Staging
        if: ${{ inputs.environment == 'staging' }}
        run: echo "FORMATTED_ENVIRONMENT=Staging" >> $GITHUB_ENV

      - name: Check for Production
        if: ${{ inputs.environment == 'production' }}
        run: echo "FORMATTED_ENVIRONMENT=Production" >> $GITHUB_ENV

      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version

      - name: Set version to environment variable (VERSION)
        shell: bash
        run: |
          value=`cat version.txt`
          echo $value
          echo "VERSION=$value" >> $GITHUB_ENV

      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          files: "Microservice/appsettings.${{ env.FORMATTED_ENVIRONMENT }}.json"

      # Don't use access key Id and secret key with @
      - name: Update app settings
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          sed -i "s/<version>/${{ env.VERSION }}/g" Microservice/appsettings.${{ env.FORMATTED_ENVIRONMENT }}.json
          sed -i "s@<accesskeyid>@${{ secrets.access-key-id }}@g" Microservice/appsettings.json
          sed -i "s@<secretaccesskey>@${{ secrets.secret-access-key }}@g" Microservice/appsettings.json
          sed -i "s@<github_pat>@${{ secrets.personal-access-token }}@g" Microservice/appsettings.json

      - name: Update environment settings - Home
        if: ${{ inputs.service-name == 'Home' }}
        run: sed -i "s/<version>/${{ env.VERSION }}/g" Microservice/src/environments/${{ inputs.environment-file }}

      - name: Configure Dockerfile
        if: ${{ inputs.service-name != 'Home' }}
        run: |
          sed -i "s/<environment_name>/${{ env.FORMATTED_ENVIRONMENT }}/g" dockerfile
          sed -i "s/<git_pat>/${{ secrets.personal-access-token }}/g" dockerfile
          sed -i "s/<git_user>/${{ secrets.git-admin-user }}/g" dockerfile

      - name: Configure API Keys & Dockerfile (Home)
        if: ${{ inputs.service-name == 'Home' }}
        run: |
          sed -i "s/<environment_name>/${{ inputs.environment }}/g" dockerfile
          sed -i "s/<firebase_api_key>/${{ secrets.firebase-api-key }}/g" Microservice/src/environments/${{ inputs.environment-file }}
          sed -i "s/<google_api_key>/${{ secrets.google-api-key }}/g" Microservice/android/app/google-services-${{ inputs.environment }}.json
          sed -i "s/<google_ios_api_key>/${{ secrets.google-ios-api-key }}/g" Microservice/ios/App/App/GoogleService-Info-${{ inputs.environment }}.plist
          sed -i "s/<googlemap_api_key>/${{ secrets.google-map-api-key }}/g" Microservice/src/environments/${{ inputs.environment-file }}
          sed -i "s/<googlemap_api_key>/${{ secrets.google-map-api-key }}/g" Microservice/src/index.html
          sed -i "s/<googlemap_api_key>/${{ secrets.google-map-api-key }}/g" Microservice/capacitor.config.json
          sed -i "s/<googlemap_api_key>/${{ secrets.google-map-api-key }}/g" Microservice/config.xml
          sed -i "s/<googlemap_api_key>/${{ secrets.google-map-api-key }}/g" Microservice/android/app/src/main/assets/capacitor.config.json
          sed -i "s/<googlemap_api_key>/${{ secrets.google-map-api-key }}/g" Microservice/ios/App/App/capacitor.config.json

      - name: Configure Task Definition
        run: |
          sed -i "s/<aws_account_id>/${{ secrets.aws-account-id }}/g" TaskDefinitions/task-definition-${{ inputs.environment }}.json
          sed -i "s/<region>/${{ secrets.region }}/g" TaskDefinitions/task-definition-${{ inputs.environment }}.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.access-key-id }}
          aws-secret-access-key: ${{ secrets.secret-access-key }}
          aws-region: ${{ secrets.region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.aws-account-id }}.dkr.ecr.${{ secrets.region }}.amazonaws.com
          username: ${{ secrets.access-key-id }}
          password: ${{ secrets.secret-access-key }}

      - name: Build, tag and push
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Render in the new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: TaskDefinitions/task-definition-${{ inputs.environment }}.json
          container-name: ${{ inputs.service-name }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy ECS task definition
        if: ${{ inputs.is-scheduled-task == false || inputs.is-scheduled-task == '' || inputs.is-scheduled-task == null  }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.service-name }}
          cluster: ${{ inputs.cluster-name }}
          wait-for-service-stability: false

      # Specific deployment for Scheduled Tasks
      - name: Deploy to ECS Scheduled Tasks
        if: ${{ inputs.is-scheduled-task == true  }}
        uses: airfordable/ecs-deploy-task-definition-to-scheduled-task@v2.0.0
        with:
          cluster: ${{ inputs.cluster-name }}
          rule-prefix: ${{ inputs.rule-prefix }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}

      # Specific for Gateway
      - name: run postman scripts
        if: ${{ inputs.service-name == 'Gateway' }}
        uses: matt-ball/newman-action@master
        with:
          collection: "ApiRequests/Collections/Insight-ApiGateway-Monitor.postman_collection.json"
          environment: "ApiRequests/Environments/Insight-APIGateway-Monitor [${{ inputs.environment }}].postman_environment.json"
