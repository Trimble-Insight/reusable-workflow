on:
  workflow_call:
    
    inputs:
      service-name:
        required: true
        type: string
      environment:
        required: true
        type: string
      cluster-name:
        required: true
        type: string
      repository:
        required: true
        type: string
      ecr-repository:
        required: true
        type: string
      rule-prefix:
        required: false
        type: string
    
    secrets:
      aws-account-id: 
        required: true
      region:
        required: true
      access-key-id:
        required: true
      secret-access-key:
        required: true
      personal-access-token:
        required: true
      github-token:
         required: true
      git-admin-user:
        required: false
      version-major:
        required: true
      version-minor:
        required: true
      version-hotfix:
        required: true
      version-build:
        required: true
      last-preview-build:
        required: false
      firebase-api-key:
        required: false
      google-api-key:
        required: false
      google-ios-api-key:
        required: false
      google-map-api-key:
        required: false

jobs:
  update_version:
    uses: ./.github/workflows/UpdateBuildVersion.yml
    with:
      service-name: ${{ inputs.service-name }}
      environment: ${{ inputs.environment }}
      repository: ${{ inputs.repository }}
    secrets: 
      personal-access-token: ${{ secrets.personal-access-token }}
      github-token: ${{ secrets.github-token }}
      version-major: ${{ secrets.version-major }}
      version-minor: ${{ secrets.version-minor }}
      version-hotfix: ${{ secrets.version-hotfix }}
      version-build: ${{ secrets.version-build }}
      last-preview-build: ${{ secrets.last-preview-build }}

  deploy:
    runs-on: ubuntu-latest
    needs: update_version
    env:
      FORMATTED_ENVIRONMENT: null

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check for Preview
        if: ${{ inputs.environment == 'preview' }}
        run: echo "FORMATTED_ENVIRONMENT=Preview" >> $GITHUB_ENV 
      
      - name: Check for Staging
        if: ${{ inputs.environment == 'staging' }}
        run: echo "FORMATTED_ENVIRONMENT=Staging" >> $GITHUB_ENV
      
      - name: Check for Production
        if: ${{ inputs.environment == 'production' }}
        run: echo "FORMATTED_ENVIRONMENT=Production" >> $GITHUB_ENV 
      
      - name: Update Environment - Dockerfile
        if: ${{ inputs.service-name != 'Home' }} 
        run: |
          sed -i "s/<environment_name>/${{ env.FORMATTED_ENVIRONMENT }}/g" dockerfile
          sed -i "s/<git_pat>/${{ secrets.personal-access-token }}/g" dockerfile
          sed -i "s/<git_user>/${{ secrets.git-admin-user }}/g" dockerfile
      
      - name: Update API Keys - Home
        if: ${{ inputs.service-name == 'Home' }} 
        run: |
          sed -i "s/<firebase_api_key>/$FIREBASE_API_KEY/g" Microservice/src/environments/environment.preview.ts
          sed -i "s/<google_api_key>/$GOOGLE_API_KEY/g" Microservice/android/app/google-services-preview.json
          sed -i "s/<google_ios_api_key>/$GOOGLE_IOS_API_KEY/g" Microservice/ios/App/App/GoogleService-Info-preview.plist
          sed -i "s/<googlemap_api_key>/$GOOGLE_MAP_API_KEY/g" Microservice/src/environments/environment.preview.ts
          sed -i "s/<googlemap_api_key>/$GOOGLE_MAP_API_KEY/g" Microservice/src/index.html
          sed -i "s/<googlemap_api_key>/$GOOGLE_MAP_API_KEY/g" Microservice/capacitor.config.json
          sed -i "s/<googlemap_api_key>/$GOOGLE_MAP_API_KEY/g" Microservice/config.xml
          sed -i "s/<googlemap_api_key>/$GOOGLE_MAP_API_KEY/g" Microservice/android/app/src/main/assets/capacitor.config.json
          sed -i "s/<googlemap_api_key>/$GOOGLE_MAP_API_KEY/g" Microservice/ios/App/App/capacitor.config.json
        env:
            FIREBASE_API_KEY: "${{ secrets.firebase-api-key }}"
            GOOGLE_API_KEY: "${{ secrets.google-api-key }}"
            GOOGLE_IOS_API_KEY: "${{ secrets.google-ios-api-key }}"
            GOOGLE_MAP_API_KEY: "${{ secrets.google-map-api-key }}"
      
      - name: Configure Task Definition
        run: |
          sed -i "s/<aws_account_id>/${{ secrets.aws-account-id }}/g" TaskDefinitions/task-definition-${{ inputs.environment }}.json
          sed -i "s/<region>/${{ secrets.region }}/g" TaskDefinitions/task-definition-${{ inputs.environment }}.json
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.access-key-id }}
          aws-secret-access-key: ${{ secrets.secret-access-key }}
          aws-region: ${{ secrets.region }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.aws-account-id }}.dkr.ecr.${{ secrets.region }}.amazonaws.com
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Render in the new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: TaskDefinitions/task-definition-${{ inputs.environment }}.json
          container-name: ${{ inputs.service-name }}
          image: ${{ steps.build-image.outputs.image }}
      
      - name: Deploy ECS task definition
        if: ${{ inputs.service-name != 'DeviceInfoSynchroniser' }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.service-name }}
          cluster: ${{ inputs.cluster-name }}
          wait-for-service-stability: false
      
      # Specific deployment for DeviceInfoSynchroniser
      - name: Deploy to ECS Scheduled Tasks
        if: ${{ inputs.service-name == 'DeviceInfoSynchroniser' }}
        uses: airfordable/ecs-deploy-task-definition-to-scheduled-task@v2.0.0
        with:
          cluster: ${{ inputs.cluster-name }}
          rule-prefix: ${{ inputs.rule-prefix }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
      
      # Specific for Gateway
      - name: run postman scripts
        if: ${{ inputs.service-name == 'Gateway' }}
        uses: anthonyvscode/newman-action@v1
        with:
          collection: "ApiRequests/Collections/Insight-ApiGateway-Monitor.postman_collection.json"
          environment: "ApiRequests/Environments/Insight-APIGateway-Monitor [${{ inputs.environment }}].postman_environment.json"
          reporters: cli
      
      # Only executed to cache node_modules in the default branch (preview)
      - name: Setup Node JS v14
        if: ${{ inputs.service-name == 'Home' }}  && ${{ inputs.environment == 'preview' }} 
        id: node-setup 
        uses: actions/setup-node@v3
        with:
          node-version: 14 
      
      # Only executed to Cache node_modules in the default branch (preview)
      - name: Cache Node Modules
        if: ${{ inputs.service-name == 'Home' }}  && ${{ inputs.environment == 'preview' }}
        id: cache-node
        uses: actions/cache@v3
        with:
          path: Microservice/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('Microservice/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-