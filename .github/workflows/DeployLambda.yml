on:
  workflow_call:
    inputs:
      environment: 
        required: true
        type: string
      path:
        required: true
        type: string
      function-name:
        required: true
        type: string
      ecr-repository:
        required: true
        type: string
      function-path:
        required: true
        type: string
      lambda:
        required: true
        type: string
      domain:
        required: false
        type: string
      bucket:
        required: false
        type: string
      source:
        required: false
        type: string
      forgot-password-link:
        required: false
        type: string

    secrets:
      aws-account-id: 
        required: true
      region:
        required: true
      access-key-id:
        required: true
      secret-access-key:
        required: true
      insighthq-identity-username:
        required: false
      insighthq-identity-password:
        required: false
      insighthq-identity-hostname:
        required: false
      
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.access-key-id }}
          aws-secret-access-key: ${{ secrets.secret-access-key }}
          aws-region: ${{secrets.region}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Domain Name
        if: ${{ inputs.lambda == 'CustomMessage' }}
        run: |
            sed -i "s/<domain_name>/${{ inputs.domain }}/g" ${{ inputs.function-path }}
      
      - name: Set S3 Bucket
        if: ${{ inputs.lambda == 'CustomMessage' }}
        run: |
          sed -i "s/<bucket_name>/${{ inputs.bucket }}/g" ${{ env.function-path }}
      
      - name: Set Email Sender
        if: ${{ inputs.lambda == 'PostConfirmation' }}
        run: |
          sed -i "s/<source>/${{ inputs.source }}/g" ${{ env.function-path }}
      
      - name: Set forgot password link
        if: ${{ inputs.lambda == 'PostConfirmation' }}
        run: |
          sed -i "s_<forgotpassword>_${{ inputs.forgot-password-link }}_" ${{ env.function-path }}
      
      - name: Set Identity Username
        if: ${{ inputs.lambda == 'PreToken' }}
        run: |
            sed -i "s/<USERNAME>/${{ secrets.insighthq-identity-username }}/g" ${{ env.function-path }}
      
      - name: Set Identity Password
        if: ${{ inputs.lambda == 'PreToken' }}
        run: |
            sed -i "s/<PASSWORD>/${{ secrets.insighthq-identity-password }}/g" ${{ env.function-path }}
      
      - name: Configure environment settings
        if: ${{ inputs.lambda == 'PreToken' }}
        run: |
            sed -i "s/<HOSTNAME>/${{ secrets.insighthq-identity-hostname }}/g" ${{ env.function-path }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.aws-account-id }}.dkr.ecr.${{ secrets.region }}.amazonaws.com
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          IMAGE_TAG: "latest"
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd ${{ inputs.path }}
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Update AWS Lambda Function Code
        env:
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          aws lambda update-function-code --function-name arn:aws:lambda:${{ secrets.region }}:${{ secrets.aws-account-id }}:function:${{ inputs.function-name }} --image-uri $IMAGE_URI
      

